export interface IWebWorkerMsg {
    type: MSG_TYPE;
    payload: any;
}
export interface IFSOperateMsg extends IWebWorkerMsg {
    type: MSG_TYPE.WEBWORKER_FS_OPERATE | MSG_TYPE.WEBWORKER_FS_OPERATE_CALLBACK | MSG_TYPE.WEBWORKER_FS_OPERATE_SYNC;
    callbackId: string;
    payload: {
        method: string;
        args?: any[];
        result?: any;
        errorMsg?: string;
    };
}
export declare enum MSG_TYPE {
    CREATE_WORKER = "CREATE_WORKER",
    CREATE_WORKER_RESULT = "CREATE_WORKER_RESULT",
    PROXY_WORKER_TO_FROM_WORKER_PROXY_MSG = "PROXY_WORKER_TO_FROM_WORKER_PROXY_MSG",
    MAIN_TO_WORKER_PROXY_MSG = "MAIN_TO_WORKER_PROXY_MSG",
    TERMINATE_WORKER_PROXY_MSG = "TERMINATE_WORKER_PROXY_MSG",
    ON_WORKER_ERROR = "ON_WORKER_ERROR",
    WEBWORKER_FS_OPERATE_CALLBACK = "WEBWORKER_FS_OPERATE_CALLBACK",
    WEBWORKER_FS_OPERATE = "WEBWORKER_FS_OPERATE",
    WEBWORKER_FS_OPERATE_SYNC = "WEBWORKER_FS_OPERATE_SYNC",
    SYNC_CHANNEL = "SYNC_CHANNEL",
    WORKER_LOGIC_MSG = "WORKER_LOGIC_MSG"
}
